# -*- coding: utf-8 -*-
"""Poseidon.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uGkBvCwTPeqFEFDihw0U024XsQSEP8Sf
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
# import numpy as np
# from sklearn.svm import SVC
# from sklearn.metrics import confusion_matrix,classification_report
# from sklearn.naive_bayes import MultinomialNB, GaussianNB
# from sklearn.linear_model import Ridge
# ridge_reg= Ridge(alpha=50, max_iter=100, tol=0.1)
# import warnings
# warnings.filterwarnings("ignore")
# %matplotlib inline

df = pd.read_csv("C:\\Users\\USER\\Documents\\my_codes\\Poseidon\\backend\\model\\Mock_Data_Prepathon.csv", encoding='utf-8')

#df.head()

# df.shape #shape of dataset

# df.describe() #description of dataset

# df.dtypes #datatypes of dataset

# df.isnull().any()

import regex as re
def clean(val):
  if(type(val)!=float):
    val = re.sub(r'^[(?<=\$)(\d+\.\d+)]', '', str(val))
    if val == '':
        return None
    if val.endswith('B'):
        return float(val[:-1])  # Remove 'B' and convert to float
    elif val.endswith('M'):
        return float(val[:-1]) / 1000  # Remove 'M' and convert to billions
    return(float(val))
  else:
     return val
def preprocess_data(df):
  columns_to_clean = df.columns.difference(['slNo', 'company', 'country', 'countryCode'])
  d = df.copy()
  for column in columns_to_clean:
    d[column] = d[column].apply(clean)
    d1 = d.apply(lambda col: col.fillna(col.mean()) if col.dtype in ['float64', 'int64'] else col)
    d1=d1.drop(['slNo', 'company', 'country', 'countryCode'],axis=1)
  return d1

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler

def makePredictionsStockPrice(historicalData):
    historicalData = preprocess_data(historicalData)
    columns = historicalData.columns.tolist()
    stock_price_columns = [col for col in columns if col.startswith('stockPrices')]
    stock_price_df = historicalData[ stock_price_columns]

    X = stock_price_df.drop(columns=['stockPrices.2024'])
    y = historicalData['stockPrices.2024']
    return train_and_predict(X, y)


def makePredictionsRevenue(historicalData):
    historicalData = preprocess_data(historicalData)
    columns = historicalData.columns.tolist()
    revenue_price_columns = [col for col in columns if col.startswith('revenues')]
    revenue_price_df = historicalData[ revenue_price_columns]
    X = revenue_price_df.drop(columns=['revenues.2024'])
    y = historicalData['revenues.2024']

    return train_and_predict(X, y)

def makePredictionsExpenses(historicalData):
    historicalData = preprocess_data(historicalData)
    columns = historicalData.columns.tolist()
    expenses_price_columns = [col for col in columns if col.startswith('expenses')]
    expenses_price_df = historicalData[ expenses_price_columns]
    X = expenses_price_df.drop(columns=['expenses.2024'])
    y = historicalData['expenses.2024']

    return train_and_predict(X, y)

def makePredictionsMarketShare(historicalData):
    historicalData = preprocess_data(historicalData)
    columns = historicalData.columns.tolist()
    marketShare_price_columns = [col for col in columns if col.startswith('marketShares')]
    marketShare_price_df = historicalData[ marketShare_price_columns]
    X = marketShare_price_df.drop(columns=['marketShares.2024'])
    y = historicalData['marketShares.2024']

    return train_and_predict(X, y)


def train_and_predict(X, y):
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    model = LinearRegression()
    model.fit(X_train_scaled, y_train)

    predictions = model.predict(X_test_scaled)

    return predictions

#Make predictions
stock_price_predictions = makePredictionsStockPrice(df)
revenue_predictions = makePredictionsRevenue(df)
expense_predictions = makePredictionsExpenses(df)
marketShare_predictions = makePredictionsMarketShare(df)

#Print predictions
# print("Stock Price Predictions:", stock_price_predictions)
# print("Revenue Predictions:", revenue_predictions)
# print("Expense Predictions:", expense_predictions)
# print("Market Share Predictions:", marketShare_predictions)